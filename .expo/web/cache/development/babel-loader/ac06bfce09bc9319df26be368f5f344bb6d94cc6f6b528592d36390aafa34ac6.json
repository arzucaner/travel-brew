{"ast":null,"code":"import NativeEventEmitter from \"../EventEmitter/NativeEventEmitter\";\nimport NativeDevSettings from \"../NativeModules/specs/NativeDevSettings\";\nimport Platform from \"../Utilities/Platform\";\nvar DevSettings = {\n  addMenuItem: function addMenuItem(title, handler) {},\n  reload: function reload(reason) {},\n  onFastRefresh: function onFastRefresh() {}\n};\nif (__DEV__) {\n  var emitter = new NativeEventEmitter(Platform.OS !== 'ios' ? null : NativeDevSettings);\n  var subscriptions = new Map();\n  DevSettings = {\n    addMenuItem: function addMenuItem(title, handler) {\n      var subscription = subscriptions.get(title);\n      if (subscription != null) {\n        subscription.remove();\n      } else {\n        NativeDevSettings.addMenuItem(title);\n      }\n      subscription = emitter.addListener('didPressMenuItem', function (event) {\n        if (event.title === title) {\n          handler();\n        }\n      });\n      subscriptions.set(title, subscription);\n    },\n    reload: function reload(reason) {\n      if (NativeDevSettings.reloadWithReason != null) {\n        NativeDevSettings.reloadWithReason(reason != null ? reason : 'Uncategorized from JS');\n      } else {\n        NativeDevSettings.reload();\n      }\n    },\n    onFastRefresh: function onFastRefresh() {\n      NativeDevSettings.onFastRefresh == null ? void 0 : NativeDevSettings.onFastRefresh();\n    }\n  };\n}\nmodule.exports = DevSettings;","map":{"version":3,"names":["NativeEventEmitter","NativeDevSettings","Platform","DevSettings","addMenuItem","title","handler","reload","reason","onFastRefresh","__DEV__","emitter","OS","subscriptions","Map","subscription","get","remove","addListener","event","set","reloadWithReason","module","exports"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/Utilities/DevSettings.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport NativeDevSettings from '../NativeModules/specs/NativeDevSettings';\nimport Platform from '../Utilities/Platform';\n\nlet DevSettings: {\n  addMenuItem(title: string, handler: () => mixed): void,\n  reload(reason?: string): void,\n  onFastRefresh(): void,\n} = {\n  addMenuItem(title: string, handler: () => mixed): void {},\n  reload(reason?: string): void {},\n  onFastRefresh(): void {},\n};\n\ntype DevSettingsEventDefinitions = {\n  didPressMenuItem: [{title: string}],\n};\n\nif (__DEV__) {\n  const emitter = new NativeEventEmitter<DevSettingsEventDefinitions>(\n    // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n    // If you want to use the native module on other platforms, please remove this condition and test its behavior\n    Platform.OS !== 'ios' ? null : NativeDevSettings,\n  );\n  const subscriptions = new Map<string, EventSubscription>();\n\n  DevSettings = {\n    addMenuItem(title: string, handler: () => mixed): void {\n      // Make sure items are not added multiple times. This can\n      // happen when hot reloading the module that registers the\n      // menu items. The title is used as the id which means we\n      // don't support multiple items with the same name.\n      let subscription = subscriptions.get(title);\n      if (subscription != null) {\n        subscription.remove();\n      } else {\n        NativeDevSettings.addMenuItem(title);\n      }\n\n      subscription = emitter.addListener('didPressMenuItem', event => {\n        if (event.title === title) {\n          handler();\n        }\n      });\n      subscriptions.set(title, subscription);\n    },\n    reload(reason?: string): void {\n      if (NativeDevSettings.reloadWithReason != null) {\n        NativeDevSettings.reloadWithReason(reason ?? 'Uncategorized from JS');\n      } else {\n        NativeDevSettings.reload();\n      }\n    },\n    onFastRefresh(): void {\n      NativeDevSettings.onFastRefresh?.();\n    },\n  };\n}\n\nmodule.exports = DevSettings;\n"],"mappings":"AAYA,OAAOA,kBAAkB;AACzB,OAAOC,iBAAiB;AACxB,OAAOC,QAAQ;AAEf,IAAIC,WAIH,GAAG;EACFC,WAAW,WAAAA,YAACC,KAAa,EAAEC,OAAoB,EAAQ,CAAC,CAAC;EACzDC,MAAM,WAAAA,OAACC,MAAe,EAAQ,CAAC,CAAC;EAChCC,aAAa,WAAAA,cAAA,EAAS,CAAC;AACzB,CAAC;AAMD,IAAIC,OAAO,EAAE;EACX,IAAMC,OAAO,GAAG,IAAIX,kBAAkB,CAGpCE,QAAQ,CAACU,EAAE,KAAK,KAAK,GAAG,IAAI,GAAGX,iBACjC,CAAC;EACD,IAAMY,aAAa,GAAG,IAAIC,GAAG,CAA4B,CAAC;EAE1DX,WAAW,GAAG;IACZC,WAAW,WAAAA,YAACC,KAAa,EAAEC,OAAoB,EAAQ;MAKrD,IAAIS,YAAY,GAAGF,aAAa,CAACG,GAAG,CAACX,KAAK,CAAC;MAC3C,IAAIU,YAAY,IAAI,IAAI,EAAE;QACxBA,YAAY,CAACE,MAAM,CAAC,CAAC;MACvB,CAAC,MAAM;QACLhB,iBAAiB,CAACG,WAAW,CAACC,KAAK,CAAC;MACtC;MAEAU,YAAY,GAAGJ,OAAO,CAACO,WAAW,CAAC,kBAAkB,EAAE,UAAAC,KAAK,EAAI;QAC9D,IAAIA,KAAK,CAACd,KAAK,KAAKA,KAAK,EAAE;UACzBC,OAAO,CAAC,CAAC;QACX;MACF,CAAC,CAAC;MACFO,aAAa,CAACO,GAAG,CAACf,KAAK,EAAEU,YAAY,CAAC;IACxC,CAAC;IACDR,MAAM,WAAAA,OAACC,MAAe,EAAQ;MAC5B,IAAIP,iBAAiB,CAACoB,gBAAgB,IAAI,IAAI,EAAE;QAC9CpB,iBAAiB,CAACoB,gBAAgB,CAACb,MAAM,WAANA,MAAM,GAAI,uBAAuB,CAAC;MACvE,CAAC,MAAM;QACLP,iBAAiB,CAACM,MAAM,CAAC,CAAC;MAC5B;IACF,CAAC;IACDE,aAAa,WAAAA,cAAA,EAAS;MACpBR,iBAAiB,CAACQ,aAAa,oBAA/BR,iBAAiB,CAACQ,aAAa,CAAG,CAAC;IACrC;EACF,CAAC;AACH;AAEAa,MAAM,CAACC,OAAO,GAAGpB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}