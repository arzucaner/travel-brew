{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar PixelRatio = require(\"../Utilities/PixelRatio\").default;\nvar Platform = require(\"../Utilities/Platform\");\nvar _require = require(\"./AssetUtils\"),\n  pickScale = _require.pickScale;\nvar _require2 = require('@react-native/assets-registry/path-support'),\n  getAndroidResourceFolderName = _require2.getAndroidResourceFolderName,\n  getAndroidResourceIdentifier = _require2.getAndroidResourceIdentifier,\n  getBasePath = _require2.getBasePath;\nvar invariant = require('invariant');\nfunction getScaledAssetPath(asset) {\n  var scale = pickScale(asset.scales, PixelRatio.get());\n  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  var assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\nfunction getAssetPathInDrawableFolder(asset) {\n  var scale = pickScale(asset.scales, PixelRatio.get());\n  var drawableFolder = getAndroidResourceFolderName(asset, scale);\n  var fileName = getAndroidResourceIdentifier(asset);\n  return drawableFolder + '/' + fileName + '.' + asset.type;\n}\nvar AssetSourceResolver = function () {\n  function AssetSourceResolver(serverUrl, jsbundleUrl, asset) {\n    _classCallCheck(this, AssetSourceResolver);\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n  _createClass(AssetSourceResolver, [{\n    key: \"isLoadedFromServer\",\n    value: function isLoadedFromServer() {\n      return !!this.serverUrl;\n    }\n  }, {\n    key: \"isLoadedFromFileSystem\",\n    value: function isLoadedFromFileSystem() {\n      return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n    }\n  }, {\n    key: \"defaultAsset\",\n    value: function defaultAsset() {\n      if (this.isLoadedFromServer()) {\n        return this.assetServerURL();\n      }\n      if (Platform.OS === 'android') {\n        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();\n      } else {\n        return this.scaledAssetURLNearBundle();\n      }\n    }\n  }, {\n    key: \"assetServerURL\",\n    value: function assetServerURL() {\n      invariant(!!this.serverUrl, 'need server to load from');\n      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);\n    }\n  }, {\n    key: \"scaledAssetPath\",\n    value: function scaledAssetPath() {\n      return this.fromSource(getScaledAssetPath(this.asset));\n    }\n  }, {\n    key: \"scaledAssetURLNearBundle\",\n    value: function scaledAssetURLNearBundle() {\n      var path = this.jsbundleUrl || 'file://';\n      return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'));\n    }\n  }, {\n    key: \"resourceIdentifierWithoutScale\",\n    value: function resourceIdentifierWithoutScale() {\n      invariant(Platform.OS === 'android', 'resource identifiers work on Android');\n      return this.fromSource(getAndroidResourceIdentifier(this.asset));\n    }\n  }, {\n    key: \"drawableFolderInBundle\",\n    value: function drawableFolderInBundle() {\n      var path = this.jsbundleUrl || 'file://';\n      return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n    }\n  }, {\n    key: \"fromSource\",\n    value: function fromSource(source) {\n      return {\n        __packager_asset: true,\n        width: this.asset.width,\n        height: this.asset.height,\n        uri: source,\n        scale: pickScale(this.asset.scales, PixelRatio.get())\n      };\n    }\n  }]);\n  return AssetSourceResolver;\n}();\nAssetSourceResolver.pickScale = pickScale;\nmodule.exports = AssetSourceResolver;","map":{"version":3,"names":["_classCallCheck","require","_createClass","PixelRatio","default","Platform","_require","pickScale","_require2","getAndroidResourceFolderName","getAndroidResourceIdentifier","getBasePath","invariant","getScaledAssetPath","asset","scale","scales","get","scaleSuffix","assetDir","name","type","getAssetPathInDrawableFolder","drawableFolder","fileName","AssetSourceResolver","serverUrl","jsbundleUrl","key","value","isLoadedFromServer","isLoadedFromFileSystem","startsWith","defaultAsset","assetServerURL","OS","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","scaledAssetPath","path","replace","source","__packager_asset","width","height","uri","module","exports"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/Image/AssetSourceResolver.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from '@react-native/assets-registry/registry';\n\nconst PixelRatio = require('../Utilities/PixelRatio').default;\nconst Platform = require('../Utilities/Platform');\nconst {pickScale} = require('./AssetUtils');\nconst {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n} = require('@react-native/assets-registry/path-support');\nconst invariant = require('invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset: PackagerAsset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset: PackagerAsset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const drawableFolder = getAndroidResourceFolderName(asset, scale);\n  const fileName = getAndroidResourceIdentifier(asset);\n  return drawableFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(\n      // Assets can have relative paths outside of the project root.\n      // When bundling them we replace `../` with `_` to make sure they\n      // don't end up outside of the expected assets directory.\n      path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'),\n    );\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(getAndroidResourceIdentifier(this.asset));\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale: (scales: Array<number>, deviceScale?: number) => number =\n    pickScale;\n}\n\nmodule.exports = AssetSourceResolver;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}