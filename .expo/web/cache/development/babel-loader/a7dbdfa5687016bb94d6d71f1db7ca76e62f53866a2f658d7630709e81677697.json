{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativePerformanceObserver from \"./NativePerformanceObserver\";\nimport { warnNoNativePerformanceObserver } from \"./PerformanceObserver\";\nvar cachedEventCounts;\nfunction getCachedEventCounts() {\n  var _cachedEventCounts;\n  if (cachedEventCounts) {\n    return cachedEventCounts;\n  }\n  if (!NativePerformanceObserver) {\n    warnNoNativePerformanceObserver();\n    return new Map();\n  }\n  cachedEventCounts = new Map(NativePerformanceObserver.getEventCounts());\n  global.queueMicrotask(function () {\n    cachedEventCounts = null;\n  });\n  return (_cachedEventCounts = cachedEventCounts) != null ? _cachedEventCounts : new Map();\n}\nvar EventCounts = function () {\n  function EventCounts() {\n    _classCallCheck(this, EventCounts);\n  }\n  _createClass(EventCounts, [{\n    key: \"size\",\n    get: function get() {\n      return getCachedEventCounts().size;\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      return getCachedEventCounts().entries();\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback) {\n      return getCachedEventCounts().forEach(callback);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      return getCachedEventCounts().get(key);\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      return getCachedEventCounts().has(key);\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return getCachedEventCounts().keys();\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      return getCachedEventCounts().values();\n    }\n  }]);\n  return EventCounts;\n}();\nexport { EventCounts as default };","map":{"version":3,"names":["NativePerformanceObserver","warnNoNativePerformanceObserver","cachedEventCounts","getCachedEventCounts","_cachedEventCounts","Map","getEventCounts","global","queueMicrotask","EventCounts","_classCallCheck","_createClass","key","get","size","value","entries","forEach","callback","has","keys","values","default"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/WebPerformance/EventCounts.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport NativePerformanceObserver from './NativePerformanceObserver';\nimport {warnNoNativePerformanceObserver} from './PerformanceObserver';\n\ntype EventCountsForEachCallbackType =\n  | (() => void)\n  | ((value: number) => void)\n  | ((value: number, key: string) => void)\n  | ((value: number, key: string, map: Map<string, number>) => void);\n\nlet cachedEventCounts: ?Map<string, number>;\n\nfunction getCachedEventCounts(): Map<string, number> {\n  if (cachedEventCounts) {\n    return cachedEventCounts;\n  }\n  if (!NativePerformanceObserver) {\n    warnNoNativePerformanceObserver();\n    return new Map();\n  }\n\n  cachedEventCounts = new Map<string, number>(\n    NativePerformanceObserver.getEventCounts(),\n  );\n  // $FlowFixMe[incompatible-call]\n  global.queueMicrotask(() => {\n    // To be consistent with the calls to the API from the same task,\n    // but also not to refetch the data from native too often,\n    // schedule to invalidate the cache later,\n    // after the current task is guaranteed to have finished.\n    cachedEventCounts = null;\n  });\n  return cachedEventCounts ?? new Map();\n}\n/**\n * Implementation of the EventCounts Web Performance API\n * corresponding to the standard in\n * https://www.w3.org/TR/event-timing/#eventcounts\n */\nexport default class EventCounts {\n  // flowlint unsafe-getters-setters:off\n  get size(): number {\n    return getCachedEventCounts().size;\n  }\n\n  entries(): Iterator<[string, number]> {\n    return getCachedEventCounts().entries();\n  }\n\n  forEach(callback: EventCountsForEachCallbackType): void {\n    return getCachedEventCounts().forEach(callback);\n  }\n\n  get(key: string): ?number {\n    return getCachedEventCounts().get(key);\n  }\n\n  has(key: string): boolean {\n    return getCachedEventCounts().has(key);\n  }\n\n  keys(): Iterator<string> {\n    return getCachedEventCounts().keys();\n  }\n\n  values(): Iterator<number> {\n    return getCachedEventCounts().values();\n  }\n}\n"],"mappings":";;AAUA,OAAOA,yBAAyB;AAChC,SAAQC,+BAA+B;AAQvC,IAAIC,iBAAuC;AAE3C,SAASC,oBAAoBA,CAAA,EAAwB;EAAA,IAAAC,kBAAA;EACnD,IAAIF,iBAAiB,EAAE;IACrB,OAAOA,iBAAiB;EAC1B;EACA,IAAI,CAACF,yBAAyB,EAAE;IAC9BC,+BAA+B,CAAC,CAAC;IACjC,OAAO,IAAII,GAAG,CAAC,CAAC;EAClB;EAEAH,iBAAiB,GAAG,IAAIG,GAAG,CACzBL,yBAAyB,CAACM,cAAc,CAAC,CAC3C,CAAC;EAEDC,MAAM,CAACC,cAAc,CAAC,YAAM;IAK1BN,iBAAiB,GAAG,IAAI;EAC1B,CAAC,CAAC;EACF,QAAAE,kBAAA,GAAOF,iBAAiB,YAAAE,kBAAA,GAAI,IAAIC,GAAG,CAAC,CAAC;AACvC;AAAC,IAMoBI,WAAW;EAAA,SAAAA,YAAA;IAAAC,eAAA,OAAAD,WAAA;EAAA;EAAAE,YAAA,CAAAF,WAAA;IAAAG,GAAA;IAAAC,GAAA,EAE9B,SAAAA,IAAA,EAAmB;MACjB,OAAOV,oBAAoB,CAAC,CAAC,CAACW,IAAI;IACpC;EAAC;IAAAF,GAAA;IAAAG,KAAA,EAED,SAAAC,QAAA,EAAsC;MACpC,OAAOb,oBAAoB,CAAC,CAAC,CAACa,OAAO,CAAC,CAAC;IACzC;EAAC;IAAAJ,GAAA;IAAAG,KAAA,EAED,SAAAE,QAAQC,QAAwC,EAAQ;MACtD,OAAOf,oBAAoB,CAAC,CAAC,CAACc,OAAO,CAACC,QAAQ,CAAC;IACjD;EAAC;IAAAN,GAAA;IAAAG,KAAA,EAED,SAAAF,IAAID,GAAW,EAAW;MACxB,OAAOT,oBAAoB,CAAC,CAAC,CAACU,GAAG,CAACD,GAAG,CAAC;IACxC;EAAC;IAAAA,GAAA;IAAAG,KAAA,EAED,SAAAI,IAAIP,GAAW,EAAW;MACxB,OAAOT,oBAAoB,CAAC,CAAC,CAACgB,GAAG,CAACP,GAAG,CAAC;IACxC;EAAC;IAAAA,GAAA;IAAAG,KAAA,EAED,SAAAK,KAAA,EAAyB;MACvB,OAAOjB,oBAAoB,CAAC,CAAC,CAACiB,IAAI,CAAC,CAAC;IACtC;EAAC;IAAAR,GAAA;IAAAG,KAAA,EAED,SAAAM,OAAA,EAA2B;MACzB,OAAOlB,oBAAoB,CAAC,CAAC,CAACkB,MAAM,CAAC,CAAC;IACxC;EAAC;EAAA,OAAAZ,WAAA;AAAA;AAAA,SA5BkBA,WAAW,IAAAa,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}