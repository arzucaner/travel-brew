{"ast":null,"code":"'use strict';\n\nexport function getFabricUIManager() {\n  return global.nativeFabricUIManager;\n}","map":{"version":3,"names":["getFabricUIManager","global","nativeFabricUIManager"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/ReactNative/FabricUIManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nimport type {\n  LayoutAnimationConfig,\n  MeasureInWindowOnSuccessCallback,\n  MeasureLayoutOnSuccessCallback,\n  MeasureOnSuccessCallback,\n} from '../Renderer/shims/ReactNativeTypes';\nimport type {RootTag} from '../Types/RootTagTypes';\n\n// TODO: type these properly.\nexport opaque type Node = {...};\ntype NodeSet = Array<Node>;\ntype NodeProps = {...};\ntype InstanceHandle = {...};\nexport type Spec = {|\n  +createNode: (\n    reactTag: number,\n    viewName: string,\n    rootTag: RootTag,\n    props: NodeProps,\n    instanceHandle: InstanceHandle,\n  ) => Node,\n  +cloneNode: (node: Node) => Node,\n  +cloneNodeWithNewChildren: (node: Node) => Node,\n  +cloneNodeWithNewProps: (node: Node, newProps: NodeProps) => Node,\n  +cloneNodeWithNewChildrenAndProps: (node: Node, newProps: NodeProps) => Node,\n  +createChildSet: (rootTag: RootTag) => NodeSet,\n  +appendChild: (parentNode: Node, child: Node) => Node,\n  +appendChildToSet: (childSet: NodeSet, child: Node) => void,\n  +completeRoot: (rootTag: RootTag, childSet: NodeSet) => void,\n  +measure: (node: Node, callback: MeasureOnSuccessCallback) => void,\n  +measureInWindow: (\n    node: Node,\n    callback: MeasureInWindowOnSuccessCallback,\n  ) => void,\n  +measureLayout: (\n    node: Node,\n    relativeNode: Node,\n    onFail: () => void,\n    onSuccess: MeasureLayoutOnSuccessCallback,\n  ) => void,\n  +configureNextLayoutAnimation: (\n    config: LayoutAnimationConfig,\n    callback: () => void, // check what is returned here\n    errorCallback: () => void,\n  ) => void,\n  +sendAccessibilityEvent: (node: Node, eventType: string) => void,\n  +findShadowNodeByTag_DEPRECATED: (reactTag: number) => ?Node,\n  +getBoundingClientRect: (\n    node: Node,\n  ) => [\n    /* x:*/ number,\n    /* y:*/ number,\n    /* width:*/ number,\n    /* height:*/ number,\n  ],\n  +setNativeProps: (node: Node, newProps: NodeProps) => void,\n  +dispatchCommand: (\n    node: Node,\n    commandName: string,\n    args: Array<mixed>,\n  ) => void,\n|};\n\n// This is exposed as a getter because apps using the legacy renderer AND\n// Fabric can define the binding lazily. If we evaluated the global and cached\n// it in the module we might be caching an `undefined` value before it is set.\nexport function getFabricUIManager(): ?Spec {\n  return global.nativeFabricUIManager;\n}\n"],"mappings":"AAUA,YAAY;;AAoEZ,OAAO,SAASA,kBAAkBA,CAAA,EAAU;EAC1C,OAAOC,MAAM,CAACC,qBAAqB;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}