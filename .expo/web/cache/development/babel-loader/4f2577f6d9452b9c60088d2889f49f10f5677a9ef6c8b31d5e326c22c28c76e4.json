{"ast":null,"code":"'use strict';\n\nvar invariant = require('invariant');\nvar levelsMap = {\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  fatal: 'error'\n};\nvar warningHandler = null;\nvar RCTLog = {\n  logIfNoNativeHook: function logIfNoNativeHook(level) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (typeof global.nativeLoggingHook === 'undefined') {\n      RCTLog.logToConsole.apply(RCTLog, [level].concat(args));\n    } else {\n      if (warningHandler && level === 'warn') {\n        warningHandler.apply(void 0, args);\n      }\n    }\n  },\n  logToConsole: function logToConsole(level) {\n    var _console;\n    var logFn = levelsMap[level];\n    invariant(logFn, 'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString());\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    (_console = console)[logFn].apply(_console, args);\n  },\n  setWarningHandler: function setWarningHandler(handler) {\n    warningHandler = handler;\n  }\n};\nmodule.exports = RCTLog;","map":{"version":3,"names":["invariant","require","levelsMap","log","info","warn","error","fatal","warningHandler","RCTLog","logIfNoNativeHook","level","_len","arguments","length","args","Array","_key","global","nativeLoggingHook","logToConsole","apply","concat","_console","logFn","Object","keys","toString","_len2","_key2","console","setWarningHandler","handler","module","exports"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/Utilities/RCTLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nconst levelsMap = {\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  fatal: 'error',\n};\n\nlet warningHandler: ?(...Array<mixed>) => void = null;\n\nconst RCTLog = {\n  // level one of log, info, warn, error, mustfix\n  logIfNoNativeHook(level: string, ...args: Array<mixed>): void {\n    // We already printed in the native console, so only log here if using a js debugger\n    if (typeof global.nativeLoggingHook === 'undefined') {\n      RCTLog.logToConsole(level, ...args);\n    } else {\n      // Report native warnings to LogBox\n      if (warningHandler && level === 'warn') {\n        warningHandler(...args);\n      }\n    }\n  },\n\n  // Log to console regardless of nativeLoggingHook\n  logToConsole(level: string, ...args: Array<mixed>): void {\n    const logFn = levelsMap[level];\n    invariant(\n      logFn,\n      'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString(),\n    );\n\n    console[logFn](...args);\n  },\n\n  setWarningHandler(handler: typeof warningHandler): void {\n    warningHandler = handler;\n  },\n};\n\nmodule.exports = RCTLog;\n"],"mappings":"AAUA,YAAY;;AAEZ,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AAEtC,IAAMC,SAAS,GAAG;EAChBC,GAAG,EAAE,KAAK;EACVC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE;AACT,CAAC;AAED,IAAIC,cAA0C,GAAG,IAAI;AAErD,IAAMC,MAAM,GAAG;EAEbC,iBAAiB,WAAAA,kBAACC,KAAa,EAA+B;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAA1BC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAJF,IAAI,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAEtC,IAAI,OAAOC,MAAM,CAACC,iBAAiB,KAAK,WAAW,EAAE;MACnDV,MAAM,CAACW,YAAY,CAAAC,KAAA,CAAnBZ,MAAM,GAAcE,KAAK,EAAAW,MAAA,CAAKP,IAAI,EAAC;IACrC,CAAC,MAAM;MAEL,IAAIP,cAAc,IAAIG,KAAK,KAAK,MAAM,EAAE;QACtCH,cAAc,CAAAa,KAAA,SAAIN,IAAI,CAAC;MACzB;IACF;EACF,CAAC;EAGDK,YAAY,WAAAA,aAACT,KAAa,EAA+B;IAAA,IAAAY,QAAA;IACvD,IAAMC,KAAK,GAAGtB,SAAS,CAACS,KAAK,CAAC;IAC9BX,SAAS,CACPwB,KAAK,EACL,SAAS,GAAGb,KAAK,GAAG,eAAe,GAAGc,MAAM,CAACC,IAAI,CAACxB,SAAS,CAAC,CAACyB,QAAQ,CAAC,CACxE,CAAC;IAAC,SAAAC,KAAA,GAAAf,SAAA,CAAAC,MAAA,EAL2BC,IAAI,OAAAC,KAAA,CAAAY,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAJd,IAAI,CAAAc,KAAA,QAAAhB,SAAA,CAAAgB,KAAA;IAAA;IAOjC,CAAAN,QAAA,GAAAO,OAAO,EAACN,KAAK,CAAC,CAAAH,KAAA,CAAAE,QAAA,EAAIR,IAAI,CAAC;EACzB,CAAC;EAEDgB,iBAAiB,WAAAA,kBAACC,OAA8B,EAAQ;IACtDxB,cAAc,GAAGwB,OAAO;EAC1B;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGzB,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}