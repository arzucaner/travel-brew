{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Platform } from 'expo-modules-core';\nimport ExpoLocation from \"./ExpoLocation\";\nimport { LocationAccuracy } from \"./Location.types\";\nimport { LocationSubscriber } from \"./LocationSubscribers\";\nexport function installWebGeolocationPolyfill() {\n  if (Platform.OS !== 'web') {\n    if (!('window' in global)) {\n      global.window = global;\n    }\n    if (!('navigator' in global.window)) {\n      global.window.navigator = {};\n    }\n    window.navigator.geolocation = {\n      getCurrentPosition: getCurrentPosition,\n      watchPosition: watchPosition,\n      clearWatch: clearWatch,\n      stopObserving: function stopObserving() {}\n    };\n  }\n}\nfunction convertGeolocationOptions(options) {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced\n  };\n}\nfunction getCurrentPosition(success) {\n  var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\nfunction _getCurrentPositionAsyncWrapper(_x, _x2, _x3) {\n  return _getCurrentPositionAsyncWrapper2.apply(this, arguments);\n}\nfunction _getCurrentPositionAsyncWrapper2() {\n  _getCurrentPositionAsyncWrapper2 = _asyncToGenerator(function* (success, error, options) {\n    try {\n      yield ExpoLocation.requestPermissionsAsync();\n      var result = yield ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n      success(result);\n    } catch (e) {\n      error(e);\n    }\n  });\n  return _getCurrentPositionAsyncWrapper2.apply(this, arguments);\n}\nfunction watchPosition(success, error, options) {\n  var watchId = LocationSubscriber.registerCallback(success);\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch(function (err) {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({\n      watchId: watchId,\n      message: err.message,\n      code: err.code\n    });\n  });\n  return watchId;\n}\nfunction clearWatch(watchId) {\n  LocationSubscriber.unregisterCallback(watchId);\n}","map":{"version":3,"names":["Platform","ExpoLocation","LocationAccuracy","LocationSubscriber","installWebGeolocationPolyfill","OS","global","window","navigator","geolocation","getCurrentPosition","watchPosition","clearWatch","stopObserving","convertGeolocationOptions","options","accuracy","enableHighAccuracy","High","Balanced","success","error","arguments","length","undefined","_getCurrentPositionAsyncWrapper","_x","_x2","_x3","_getCurrentPositionAsyncWrapper2","apply","_asyncToGenerator","requestPermissionsAsync","result","getCurrentPositionAsync","e","watchId","registerCallback","watchPositionImplAsync","catch","err","unregisterCallback","message","code"],"sources":["C:\\Users\\arzug\\Documents\\GitHub\\travel-brew\\node_modules\\expo-location\\src\\GeolocationPolyfill.ts"],"sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationObject, LocationAccuracy, LocationOptions } from './Location.types';\nimport { LocationSubscriber } from './LocationSubscribers';\n\ntype GeolocationSuccessCallback = (data: LocationObject) => void;\ntype GeolocationErrorCallback = (error: any) => void;\n\ntype GeolocationOptions = {\n  enableHighAccuracy?: boolean;\n};\n\ndeclare const global: any;\n\n// @needsAudit\n/**\n * Polyfills `navigator.geolocation` for interop with the core React Native and Web API approach to geolocation.\n */\nexport function installWebGeolocationPolyfill(): void {\n  if (Platform.OS !== 'web') {\n    // Make sure `window.navigator` is defined in the global scope.\n    if (!('window' in global)) {\n      global.window = global;\n    }\n    if (!('navigator' in global.window)) {\n      global.window.navigator = {};\n    }\n\n    // @ts-ignore\n    window.navigator.geolocation = {\n      getCurrentPosition,\n      watchPosition,\n      clearWatch,\n\n      // We don't polyfill stopObserving, this is an internal method that probably should not even exist\n      // in react-native docs\n      stopObserving: () => {},\n    };\n  }\n}\n\nfunction convertGeolocationOptions(options: GeolocationOptions): LocationOptions {\n  return {\n    accuracy: options.enableHighAccuracy ? LocationAccuracy.High : LocationAccuracy.Balanced,\n  };\n}\n\nfunction getCurrentPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback = () => {},\n  options: GeolocationOptions = {}\n): void {\n  _getCurrentPositionAsyncWrapper(success, error, options);\n}\n\n// This function exists to let us continue to return undefined from getCurrentPosition, while still\n// using async/await for the internal implementation of it\nasync function _getCurrentPositionAsyncWrapper(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n): Promise<any> {\n  try {\n    await ExpoLocation.requestPermissionsAsync();\n    const result = await ExpoLocation.getCurrentPositionAsync(convertGeolocationOptions(options));\n    success(result);\n  } catch (e) {\n    error(e);\n  }\n}\n\n// Polyfill: navigator.geolocation.watchPosition\nfunction watchPosition(\n  success: GeolocationSuccessCallback,\n  error: GeolocationErrorCallback,\n  options: GeolocationOptions\n) {\n  const watchId = LocationSubscriber.registerCallback(success);\n\n  ExpoLocation.watchPositionImplAsync(watchId, options).catch((err) => {\n    LocationSubscriber.unregisterCallback(watchId);\n    error({ watchId, message: err.message, code: err.code });\n  });\n\n  return watchId;\n}\n\n// Polyfill: navigator.geolocation.clearWatch\nfunction clearWatch(watchId: number) {\n  LocationSubscriber.unregisterCallback(watchId);\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,mBAAmB;AAE5C,OAAOC,YAAY;AACnB,SAAyBC,gBAAgB;AACzC,SAASC,kBAAkB;AAe3B,OAAM,SAAUC,6BAA6BA,CAAA;EAC3C,IAAIJ,QAAQ,CAACK,EAAE,KAAK,KAAK,EAAE;IAEzB,IAAI,EAAE,QAAQ,IAAIC,MAAM,CAAC,EAAE;MACzBA,MAAM,CAACC,MAAM,GAAGD,MAAM;;IAExB,IAAI,EAAE,WAAW,IAAIA,MAAM,CAACC,MAAM,CAAC,EAAE;MACnCD,MAAM,CAACC,MAAM,CAACC,SAAS,GAAG,EAAE;;IAI9BD,MAAM,CAACC,SAAS,CAACC,WAAW,GAAG;MAC7BC,kBAAkB,EAAlBA,kBAAkB;MAClBC,aAAa,EAAbA,aAAa;MACbC,UAAU,EAAVA,UAAU;MAIVC,aAAa,EAAE,SAAAA,cAAA,EAAK,CAAE;KACvB;;AAEL;AAEA,SAASC,yBAAyBA,CAACC,OAA2B;EAC5D,OAAO;IACLC,QAAQ,EAAED,OAAO,CAACE,kBAAkB,GAAGf,gBAAgB,CAACgB,IAAI,GAAGhB,gBAAgB,CAACiB;GACjF;AACH;AAEA,SAAST,kBAAkBA,CACzBU,OAAmC,EAEH;EAAA,IADhCC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAkC,YAAK,CAAE,CAAC;EAAA,IAC1CP,OAAA,GAAAO,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA8B,EAAE;EAEhCG,+BAA+B,CAACL,OAAO,EAAEC,KAAK,EAAEN,OAAO,CAAC;AAC1D;AAAC,SAIcU,+BAA+BA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,gCAAA,CAAAC,KAAA,OAAAR,SAAA;AAAA;AAAA,SAAAO,iCAAA;EAAAA,gCAAA,GAAAE,iBAAA,CAA9C,WACEX,OAAmC,EACnCC,KAA+B,EAC/BN,OAA2B;IAE3B,IAAI;MACF,MAAMd,YAAY,CAAC+B,uBAAuB,EAAE;MAC5C,IAAMC,MAAM,SAAShC,YAAY,CAACiC,uBAAuB,CAACpB,yBAAyB,CAACC,OAAO,CAAC,CAAC;MAC7FK,OAAO,CAACa,MAAM,CAAC;KAChB,CAAC,OAAOE,CAAC,EAAE;MACVd,KAAK,CAACc,CAAC,CAAC;;EAEZ,CAAC;EAAA,OAAAN,gCAAA,CAAAC,KAAA,OAAAR,SAAA;AAAA;AAGD,SAASX,aAAaA,CACpBS,OAAmC,EACnCC,KAA+B,EAC/BN,OAA2B;EAE3B,IAAMqB,OAAO,GAAGjC,kBAAkB,CAACkC,gBAAgB,CAACjB,OAAO,CAAC;EAE5DnB,YAAY,CAACqC,sBAAsB,CAACF,OAAO,EAAErB,OAAO,CAAC,CAACwB,KAAK,CAAC,UAACC,GAAG,EAAI;IAClErC,kBAAkB,CAACsC,kBAAkB,CAACL,OAAO,CAAC;IAC9Cf,KAAK,CAAC;MAAEe,OAAO,EAAPA,OAAO;MAAEM,OAAO,EAAEF,GAAG,CAACE,OAAO;MAAEC,IAAI,EAAEH,GAAG,CAACG;IAAI,CAAE,CAAC;EAC1D,CAAC,CAAC;EAEF,OAAOP,OAAO;AAChB;AAGA,SAASxB,UAAUA,CAACwB,OAAe;EACjCjC,kBAAkB,CAACsC,kBAAkB,CAACL,OAAO,CAAC;AAChD"},"metadata":{},"sourceType":"module","externalDependencies":[]}