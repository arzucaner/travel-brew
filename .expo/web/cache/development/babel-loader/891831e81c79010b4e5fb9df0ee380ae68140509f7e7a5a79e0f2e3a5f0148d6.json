{"ast":null,"code":"import { SyntheticError, handleException } from \"./ExceptionsManager\";\nvar ReactFiberErrorDialog = {\n  showErrorDialog: function showErrorDialog(_ref) {\n    var componentStack = _ref.componentStack,\n      errorValue = _ref.error;\n    var error;\n    if (errorValue instanceof Error) {\n      error = errorValue;\n    } else if (typeof errorValue === 'string') {\n      error = new SyntheticError(errorValue);\n    } else {\n      error = new SyntheticError('Unspecified error');\n    }\n    try {\n      error.componentStack = componentStack;\n      error.isComponentError = true;\n    } catch (_unused) {}\n    handleException(error, false);\n    return false;\n  }\n};\nexport default ReactFiberErrorDialog;","map":{"version":3,"names":["SyntheticError","handleException","ReactFiberErrorDialog","showErrorDialog","_ref","componentStack","errorValue","error","Error","isComponentError","_unused"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ExtendedError} from './ExtendedError';\n\nimport {SyntheticError, handleException} from './ExceptionsManager';\n\nexport type CapturedError = {\n  +componentStack: string,\n  +error: mixed,\n  +errorBoundary: ?{...},\n  ...\n};\n\nconst ReactFiberErrorDialog = {\n  /**\n   * Intercept lifecycle errors and ensure they are shown with the correct stack\n   * trace within the native redbox component.\n   */\n  showErrorDialog({componentStack, error: errorValue}: CapturedError): boolean {\n    let error: ?ExtendedError;\n\n    // Typically, `errorValue` should be an error. However, other values such as\n    // strings (or even null) are sometimes thrown.\n    if (errorValue instanceof Error) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (errorValue: ExtendedError);\n    } else if (typeof errorValue === 'string') {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError(errorValue): ExtendedError);\n    } else {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError('Unspecified error'): ExtendedError);\n    }\n    try {\n      error.componentStack = componentStack;\n      error.isComponentError = true;\n    } catch {\n      // Ignored.\n    }\n\n    handleException(error, false);\n\n    // Return false here to prevent ReactFiberErrorLogger default behavior of\n    // logging error details to console.error. Calls to console.error are\n    // automatically routed to the native redbox controller, which we've already\n    // done above by calling ExceptionsManager.\n    return false;\n  },\n};\n\nexport default ReactFiberErrorDialog;\n"],"mappings":"AAYA,SAAQA,cAAc,EAAEC,eAAe;AASvC,IAAMC,qBAAqB,GAAG;EAK5BC,eAAe,WAAAA,gBAAAC,IAAA,EAA8D;IAAA,IAA5DC,cAAc,GAAAD,IAAA,CAAdC,cAAc;MAASC,UAAU,GAAAF,IAAA,CAAjBG,KAAK;IACpC,IAAIA,KAAqB;IAIzB,IAAID,UAAU,YAAYE,KAAK,EAAE;MAG/BD,KAAK,GAAID,UAA0B;IACrC,CAAC,MAAM,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MAGzCC,KAAK,GAAI,IAAIP,cAAc,CAACM,UAAU,CAAiB;IACzD,CAAC,MAAM;MAGLC,KAAK,GAAI,IAAIP,cAAc,CAAC,mBAAmB,CAAiB;IAClE;IACA,IAAI;MACFO,KAAK,CAACF,cAAc,GAAGA,cAAc;MACrCE,KAAK,CAACE,gBAAgB,GAAG,IAAI;IAC/B,CAAC,CAAC,OAAAC,OAAA,EAAM,CAER;IAEAT,eAAe,CAACM,KAAK,EAAE,KAAK,CAAC;IAM7B,OAAO,KAAK;EACd;AACF,CAAC;AAED,eAAeL,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}