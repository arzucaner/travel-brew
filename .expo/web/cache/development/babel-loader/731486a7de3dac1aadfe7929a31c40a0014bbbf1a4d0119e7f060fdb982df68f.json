{"ast":null,"code":"import Platform from \"../Utilities/Platform\";\nvar ReactNativeVersion = require(\"./ReactNativeVersion\");\nexports.checkVersions = function checkVersions() {\n  var nativeVersion = Platform.constants.reactNativeVersion;\n  if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {\n    console.error(`React Native version mismatch.\\n\\nJavaScript version: ${_formatVersion(ReactNativeVersion.version)}\\n` + `Native version: ${_formatVersion(nativeVersion)}\\n\\n` + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && react-native start --reset-cache`.');\n  }\n};\nfunction _formatVersion(version) {\n  return `${version.major}.${version.minor}.${version.patch}` + (version.prerelease != undefined ? `-${version.prerelease}` : '');\n}","map":{"version":3,"names":["Platform","ReactNativeVersion","require","exports","checkVersions","nativeVersion","constants","reactNativeVersion","version","major","minor","console","error","_formatVersion","patch","prerelease","undefined"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/Core/ReactNativeVersionCheck.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport Platform from '../Utilities/Platform';\n\nconst ReactNativeVersion = require('./ReactNativeVersion');\n\n/**\n * Checks that the version of this React Native JS is compatible with the native\n * code, throwing an error if it isn't.\n *\n * The existence of this module is part of the public interface of React Native\n * even though it is used only internally within React Native. React Native\n * implementations for other platforms (ex: Windows) may override this module\n * and rely on its existence as a separate module.\n */\nexports.checkVersions = function checkVersions(): void {\n  const nativeVersion = Platform.constants.reactNativeVersion;\n  if (\n    ReactNativeVersion.version.major !== nativeVersion.major ||\n    ReactNativeVersion.version.minor !== nativeVersion.minor\n  ) {\n    console.error(\n      `React Native version mismatch.\\n\\nJavaScript version: ${_formatVersion(\n        ReactNativeVersion.version,\n      )}\\n` +\n        `Native version: ${_formatVersion(nativeVersion)}\\n\\n` +\n        'Make sure that you have rebuilt the native code. If the problem ' +\n        'persists try clearing the Watchman and packager caches with ' +\n        '`watchman watch-del-all && react-native start --reset-cache`.',\n    );\n  }\n};\n\n// Note: in OSS, the prerelease version is usually 0.Y.0-rc.W, so it is a string and not a number\n// Then we need to keep supporting that object shape.\nfunction _formatVersion(\n  version:\n    | (typeof Platform)['constants']['reactNativeVersion']\n    | {major: number, minor: number, patch: number, prerelease: ?string},\n): string {\n  return (\n    `${version.major}.${version.minor}.${version.patch}` +\n    // eslint-disable-next-line eqeqeq\n    (version.prerelease != undefined ? `-${version.prerelease}` : '')\n  );\n}\n"],"mappings":"AAUA,OAAOA,QAAQ;AAEf,IAAMC,kBAAkB,GAAGC,OAAO,uBAAuB,CAAC;AAW1DC,OAAO,CAACC,aAAa,GAAG,SAASA,aAAaA,CAAA,EAAS;EACrD,IAAMC,aAAa,GAAGL,QAAQ,CAACM,SAAS,CAACC,kBAAkB;EAC3D,IACEN,kBAAkB,CAACO,OAAO,CAACC,KAAK,KAAKJ,aAAa,CAACI,KAAK,IACxDR,kBAAkB,CAACO,OAAO,CAACE,KAAK,KAAKL,aAAa,CAACK,KAAK,EACxD;IACAC,OAAO,CAACC,KAAK,CACV,yDAAwDC,cAAc,CACrEZ,kBAAkB,CAACO,OACrB,CAAE,IAAG,GACF,mBAAkBK,cAAc,CAACR,aAAa,CAAE,MAAK,GACtD,kEAAkE,GAClE,8DAA8D,GAC9D,+DACJ,CAAC;EACH;AACF,CAAC;AAID,SAASQ,cAAcA,CACrBL,OAEsE,EAC9D;EACR,OACG,GAAEA,OAAO,CAACC,KAAM,IAAGD,OAAO,CAACE,KAAM,IAAGF,OAAO,CAACM,KAAM,EAAC,IAEnDN,OAAO,CAACO,UAAU,IAAIC,SAAS,GAAI,IAAGR,OAAO,CAACO,UAAW,EAAC,GAAG,EAAE,CAAC;AAErE"},"metadata":{},"sourceType":"module","externalDependencies":[]}