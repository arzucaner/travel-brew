{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar PressabilityPerformanceEventEmitter = function () {\n  function PressabilityPerformanceEventEmitter() {\n    _classCallCheck(this, PressabilityPerformanceEventEmitter);\n    this._listeners = [];\n  }\n  _createClass(PressabilityPerformanceEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(listener) {\n      this._listeners.push(listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(listener) {\n      var index = this._listeners.indexOf(listener);\n      if (index > -1) {\n        this._listeners.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(constructEvent) {\n      if (this._listeners.length === 0) {\n        return;\n      }\n      var event = constructEvent();\n      this._listeners.forEach(function (listener) {\n        return listener(event);\n      });\n    }\n  }]);\n  return PressabilityPerformanceEventEmitter;\n}();\nvar PressabilityPerformanceEventEmitterSingleton = new PressabilityPerformanceEventEmitter();\nexport default PressabilityPerformanceEventEmitterSingleton;","map":{"version":3,"names":["PressabilityPerformanceEventEmitter","_classCallCheck","_listeners","_createClass","key","value","addListener","listener","push","removeListener","index","indexOf","splice","emitEvent","constructEvent","length","event","forEach","PressabilityPerformanceEventEmitterSingleton"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/Pressability/PressabilityPerformanceEventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport {type PressabilityTouchSignal as TouchSignal} from './PressabilityTypes.js';\n\nexport type PressabilityPerformanceEvent = $ReadOnly<{|\n  signal: TouchSignal,\n  nativeTimestamp: number,\n|}>;\nexport type PressabilityPerformanceEventListener =\n  PressabilityPerformanceEvent => void;\n\nclass PressabilityPerformanceEventEmitter {\n  _listeners: Array<PressabilityPerformanceEventListener> = [];\n\n  constructor() {}\n\n  addListener(listener: PressabilityPerformanceEventListener): void {\n    this._listeners.push(listener);\n  }\n\n  removeListener(listener: PressabilityPerformanceEventListener): void {\n    const index = this._listeners.indexOf(listener);\n    if (index > -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  emitEvent(constructEvent: () => PressabilityPerformanceEvent): void {\n    if (this._listeners.length === 0) {\n      return;\n    }\n\n    const event = constructEvent();\n    this._listeners.forEach(listener => listener(event));\n  }\n}\n\nconst PressabilityPerformanceEventEmitterSingleton: PressabilityPerformanceEventEmitter =\n  new PressabilityPerformanceEventEmitter();\n\nexport default PressabilityPerformanceEventEmitterSingleton;\n"],"mappings":";;IAmBMA,mCAAmC;EAGvC,SAAAA,oCAAA,EAAc;IAAAC,eAAA,OAAAD,mCAAA;IAAA,KAFdE,UAAU,GAAgD,EAAE;EAE7C;EAACC,YAAA,CAAAH,mCAAA;IAAAI,GAAA;IAAAC,KAAA,EAEhB,SAAAC,YAAYC,QAA8C,EAAQ;MAChE,IAAI,CAACL,UAAU,CAACM,IAAI,CAACD,QAAQ,CAAC;IAChC;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAI,eAAeF,QAA8C,EAAQ;MACnE,IAAMG,KAAK,GAAG,IAAI,CAACR,UAAU,CAACS,OAAO,CAACJ,QAAQ,CAAC;MAC/C,IAAIG,KAAK,GAAG,CAAC,CAAC,EAAE;QACd,IAAI,CAACR,UAAU,CAACU,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAClC;IACF;EAAC;IAAAN,GAAA;IAAAC,KAAA,EAED,SAAAQ,UAAUC,cAAkD,EAAQ;MAClE,IAAI,IAAI,CAACZ,UAAU,CAACa,MAAM,KAAK,CAAC,EAAE;QAChC;MACF;MAEA,IAAMC,KAAK,GAAGF,cAAc,CAAC,CAAC;MAC9B,IAAI,CAACZ,UAAU,CAACe,OAAO,CAAC,UAAAV,QAAQ;QAAA,OAAIA,QAAQ,CAACS,KAAK,CAAC;MAAA,EAAC;IACtD;EAAC;EAAA,OAAAhB,mCAAA;AAAA;AAGH,IAAMkB,4CAAiF,GACrF,IAAIlB,mCAAmC,CAAC,CAAC;AAE3C,eAAekB,4CAA4C"},"metadata":{},"sourceType":"module","externalDependencies":[]}