{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar Systrace = require(\"../Performance/Systrace\");\nvar deepFreezeAndThrowOnMutationInDev = require(\"../Utilities/deepFreezeAndThrowOnMutationInDev\");\nvar stringifySafe = require(\"../Utilities/stringifySafe\").default;\nvar warnOnce = require(\"../Utilities/warnOnce\");\nvar ErrorUtils = require(\"../vendor/core/ErrorUtils\");\nvar invariant = require('invariant');\nvar TO_JS = 0;\nvar TO_NATIVE = 1;\nvar MODULE_IDS = 0;\nvar METHOD_IDS = 1;\nvar PARAMS = 2;\nvar MIN_TIME_BETWEEN_FLUSHES_MS = 5;\nvar TRACE_TAG_REACT_APPS = 1 << 17;\nvar DEBUG_INFO_LIMIT = 32;\nvar MessageQueue = function () {\n  function MessageQueue() {\n    _classCallCheck(this, MessageQueue);\n    this._lazyCallableModules = {};\n    this._queue = [[], [], [], 0];\n    this._successCallbacks = new Map();\n    this._failureCallbacks = new Map();\n    this._callID = 0;\n    this._lastFlush = 0;\n    this._eventLoopStartTime = Date.now();\n    this._reactNativeMicrotasksCallback = null;\n    if (__DEV__) {\n      this._debugInfo = {};\n      this._remoteModuleTable = {};\n      this._remoteMethodTable = {};\n    }\n    this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);\n    this.flushedQueue = this.flushedQueue.bind(this);\n    this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);\n  }\n  _createClass(MessageQueue, [{\n    key: \"callFunctionReturnFlushedQueue\",\n    value: function callFunctionReturnFlushedQueue(module, method, args) {\n      var _this = this;\n      this.__guard(function () {\n        _this.__callFunction(module, method, args);\n      });\n      return this.flushedQueue();\n    }\n  }, {\n    key: \"invokeCallbackAndReturnFlushedQueue\",\n    value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {\n      var _this2 = this;\n      this.__guard(function () {\n        _this2.__invokeCallback(cbID, args);\n      });\n      return this.flushedQueue();\n    }\n  }, {\n    key: \"flushedQueue\",\n    value: function flushedQueue() {\n      var _this3 = this;\n      this.__guard(function () {\n        _this3.__callReactNativeMicrotasks();\n      });\n      var queue = this._queue;\n      this._queue = [[], [], [], this._callID];\n      return queue[0].length ? queue : null;\n    }\n  }, {\n    key: \"getEventLoopRunningTime\",\n    value: function getEventLoopRunningTime() {\n      return Date.now() - this._eventLoopStartTime;\n    }\n  }, {\n    key: \"registerCallableModule\",\n    value: function registerCallableModule(name, module) {\n      this._lazyCallableModules[name] = function () {\n        return module;\n      };\n    }\n  }, {\n    key: \"registerLazyCallableModule\",\n    value: function registerLazyCallableModule(name, factory) {\n      var module;\n      var getValue = factory;\n      this._lazyCallableModules[name] = function () {\n        if (getValue) {\n          module = getValue();\n          getValue = null;\n        }\n        return module;\n      };\n    }\n  }, {\n    key: \"getCallableModule\",\n    value: function getCallableModule(name) {\n      var getValue = this._lazyCallableModules[name];\n      return getValue ? getValue() : null;\n    }\n  }, {\n    key: \"callNativeSyncHook\",\n    value: function callNativeSyncHook(moduleID, methodID, params, onFail, onSucc) {\n      if (__DEV__) {\n        invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\\n\\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');\n      }\n      this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n      return global.nativeCallSyncHook(moduleID, methodID, params);\n    }\n  }, {\n    key: \"processCallbacks\",\n    value: function processCallbacks(moduleID, methodID, params, onFail, onSucc) {\n      var _this4 = this;\n      if (onFail || onSucc) {\n        if (__DEV__) {\n          this._debugInfo[this._callID] = [moduleID, methodID];\n          if (this._callID > DEBUG_INFO_LIMIT) {\n            delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];\n          }\n          if (this._successCallbacks.size > 500) {\n            var info = {};\n            this._successCallbacks.forEach(function (_, callID) {\n              var debug = _this4._debugInfo[callID];\n              var module = debug && _this4._remoteModuleTable[debug[0]];\n              var method = debug && _this4._remoteMethodTable[debug[0]][debug[1]];\n              info[callID] = {\n                module: module,\n                method: method\n              };\n            });\n            warnOnce('excessive-number-of-pending-callbacks', `Excessive number of pending callbacks: ${this._successCallbacks.size}. Some pending callbacks that might have leaked by never being called from native code: ${stringifySafe(info)}`);\n          }\n        }\n        onFail && params.push(this._callID << 1);\n        onSucc && params.push(this._callID << 1 | 1);\n        this._successCallbacks.set(this._callID, onSucc);\n        this._failureCallbacks.set(this._callID, onFail);\n      }\n      if (__DEV__) {\n        global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);\n      }\n      this._callID++;\n    }\n  }, {\n    key: \"enqueueNativeCall\",\n    value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {\n      this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n      this._queue[MODULE_IDS].push(moduleID);\n      this._queue[METHOD_IDS].push(methodID);\n      if (__DEV__) {\n        var isValidArgument = function isValidArgument(val) {\n          switch (typeof val) {\n            case 'undefined':\n            case 'boolean':\n            case 'string':\n              return true;\n            case 'number':\n              return isFinite(val);\n            case 'object':\n              if (val == null) {\n                return true;\n              }\n              if (Array.isArray(val)) {\n                return val.every(isValidArgument);\n              }\n              for (var k in val) {\n                if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {\n                  return false;\n                }\n              }\n              return true;\n            case 'function':\n              return false;\n            default:\n              return false;\n          }\n        };\n        var replacer = function replacer(key, val) {\n          var t = typeof val;\n          if (t === 'function') {\n            return '<<Function ' + val.name + '>>';\n          } else if (t === 'number' && !isFinite(val)) {\n            return '<<' + val.toString() + '>>';\n          } else {\n            return val;\n          }\n        };\n        invariant(isValidArgument(params), '%s is not usable as a native method argument', JSON.stringify(params, replacer));\n        deepFreezeAndThrowOnMutationInDev(params);\n      }\n      this._queue[PARAMS].push(params);\n      var now = Date.now();\n      if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {\n        var queue = this._queue;\n        this._queue = [[], [], [], this._callID];\n        this._lastFlush = now;\n        global.nativeFlushQueueImmediate(queue);\n      }\n      Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);\n      if (__DEV__ && this.__spy && isFinite(moduleID)) {\n        this.__spy({\n          type: TO_NATIVE,\n          module: this._remoteModuleTable[moduleID],\n          method: this._remoteMethodTable[moduleID][methodID],\n          args: params\n        });\n      } else if (this.__spy) {\n        this.__spy({\n          type: TO_NATIVE,\n          module: moduleID + '',\n          method: methodID,\n          args: params\n        });\n      }\n    }\n  }, {\n    key: \"createDebugLookup\",\n    value: function createDebugLookup(moduleID, name, methods) {\n      if (__DEV__) {\n        this._remoteModuleTable[moduleID] = name;\n        this._remoteMethodTable[moduleID] = methods || [];\n      }\n    }\n  }, {\n    key: \"setReactNativeMicrotasksCallback\",\n    value: function setReactNativeMicrotasksCallback(fn) {\n      this._reactNativeMicrotasksCallback = fn;\n    }\n  }, {\n    key: \"__guard\",\n    value: function __guard(fn) {\n      if (this.__shouldPauseOnThrow()) {\n        fn();\n      } else {\n        try {\n          fn();\n        } catch (error) {\n          ErrorUtils.reportFatalError(error);\n        }\n      }\n    }\n  }, {\n    key: \"__shouldPauseOnThrow\",\n    value: function __shouldPauseOnThrow() {\n      return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;\n    }\n  }, {\n    key: \"__callReactNativeMicrotasks\",\n    value: function __callReactNativeMicrotasks() {\n      Systrace.beginEvent('JSTimers.callReactNativeMicrotasks()');\n      if (this._reactNativeMicrotasksCallback != null) {\n        this._reactNativeMicrotasksCallback();\n      }\n      Systrace.endEvent();\n    }\n  }, {\n    key: \"__callFunction\",\n    value: function __callFunction(module, method, args) {\n      this._lastFlush = Date.now();\n      this._eventLoopStartTime = this._lastFlush;\n      if (__DEV__ || this.__spy) {\n        Systrace.beginEvent(`${module}.${method}(${stringifySafe(args)})`);\n      } else {\n        Systrace.beginEvent(`${module}.${method}(...)`);\n      }\n      if (this.__spy) {\n        this.__spy({\n          type: TO_JS,\n          module: module,\n          method: method,\n          args: args\n        });\n      }\n      var moduleMethods = this.getCallableModule(module);\n      if (!moduleMethods) {\n        var callableModuleNames = Object.keys(this._lazyCallableModules);\n        var n = callableModuleNames.length;\n        var callableModuleNameList = callableModuleNames.join(', ');\n        var isBridgelessMode = global.RN$Bridgeless === true ? 'true' : 'false';\n        invariant(false, `Failed to call into JavaScript module method ${module}.${method}(). Module has not been registered as callable. Bridgeless Mode: ${isBridgelessMode}. Registered callable JavaScript modules (n = ${n}): ${callableModuleNameList}.\n        A frequent cause of the error is that the application entry file path is incorrect. This can also happen when the JS bundle is corrupt or there is an early initialization error when loading React Native.`);\n      }\n      if (!moduleMethods[method]) {\n        invariant(false, `Failed to call into JavaScript module method ${module}.${method}(). Module exists, but the method is undefined.`);\n      }\n      moduleMethods[method].apply(moduleMethods, args);\n      Systrace.endEvent();\n    }\n  }, {\n    key: \"__invokeCallback\",\n    value: function __invokeCallback(cbID, args) {\n      this._lastFlush = Date.now();\n      this._eventLoopStartTime = this._lastFlush;\n      var callID = cbID >>> 1;\n      var isSuccess = cbID & 1;\n      var callback = isSuccess ? this._successCallbacks.get(callID) : this._failureCallbacks.get(callID);\n      if (__DEV__) {\n        var debug = this._debugInfo[callID];\n        var _module = debug && this._remoteModuleTable[debug[0]];\n        var method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n        invariant(callback, `No callback found with cbID ${cbID} and callID ${callID} for ` + (method ? ` ${_module}.${method} - most likely the callback was already invoked` : `module ${_module || '<unknown>'}`) + `. Args: '${stringifySafe(args)}'`);\n        var profileName = debug ? '<callback for ' + _module + '.' + method + '>' : cbID;\n        if (callback && this.__spy) {\n          this.__spy({\n            type: TO_JS,\n            module: null,\n            method: profileName,\n            args: args\n          });\n        }\n        Systrace.beginEvent(`MessageQueue.invokeCallback(${profileName}, ${stringifySafe(args)})`);\n      }\n      if (!callback) {\n        return;\n      }\n      this._successCallbacks.delete(callID);\n      this._failureCallbacks.delete(callID);\n      callback.apply(void 0, _toConsumableArray(args));\n      if (__DEV__) {\n        Systrace.endEvent();\n      }\n    }\n  }], [{\n    key: \"spy\",\n    value: function spy(spyOrToggle) {\n      if (spyOrToggle === true) {\n        MessageQueue.prototype.__spy = function (info) {\n          console.log(`${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` + `${info.module != null ? info.module + '.' : ''}${info.method}` + `(${JSON.stringify(info.args)})`);\n        };\n      } else if (spyOrToggle === false) {\n        MessageQueue.prototype.__spy = null;\n      } else {\n        MessageQueue.prototype.__spy = spyOrToggle;\n      }\n    }\n  }]);\n  return MessageQueue;\n}();\nmodule.exports = MessageQueue;","map":{"version":3,"names":["_toConsumableArray","require","_classCallCheck","_createClass","Systrace","deepFreezeAndThrowOnMutationInDev","stringifySafe","default","warnOnce","ErrorUtils","invariant","TO_JS","TO_NATIVE","MODULE_IDS","METHOD_IDS","PARAMS","MIN_TIME_BETWEEN_FLUSHES_MS","TRACE_TAG_REACT_APPS","DEBUG_INFO_LIMIT","MessageQueue","_lazyCallableModules","_queue","_successCallbacks","Map","_failureCallbacks","_callID","_lastFlush","_eventLoopStartTime","Date","now","_reactNativeMicrotasksCallback","__DEV__","_debugInfo","_remoteModuleTable","_remoteMethodTable","callFunctionReturnFlushedQueue","bind","flushedQueue","invokeCallbackAndReturnFlushedQueue","key","value","module","method","args","_this","__guard","__callFunction","cbID","_this2","__invokeCallback","_this3","__callReactNativeMicrotasks","queue","length","getEventLoopRunningTime","registerCallableModule","name","registerLazyCallableModule","factory","getValue","getCallableModule","callNativeSyncHook","moduleID","methodID","params","onFail","onSucc","global","nativeCallSyncHook","processCallbacks","_this4","size","info","forEach","_","callID","debug","push","set","nativeTraceBeginAsyncFlow","enqueueNativeCall","isValidArgument","val","isFinite","Array","isArray","every","k","replacer","t","toString","JSON","stringify","nativeFlushQueueImmediate","counterEvent","__spy","type","createDebugLookup","methods","setReactNativeMicrotasksCallback","fn","__shouldPauseOnThrow","error","reportFatalError","DebuggerInternal","shouldPauseOnThrow","beginEvent","endEvent","moduleMethods","callableModuleNames","Object","keys","n","callableModuleNameList","join","isBridgelessMode","RN$Bridgeless","apply","isSuccess","callback","get","profileName","delete","spy","spyOrToggle","prototype","console","log","exports"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\n'use strict';\n\nconst Systrace = require('../Performance/Systrace');\nconst deepFreezeAndThrowOnMutationInDev = require('../Utilities/deepFreezeAndThrowOnMutationInDev');\nconst stringifySafe = require('../Utilities/stringifySafe').default;\nconst warnOnce = require('../Utilities/warnOnce');\nconst ErrorUtils = require('../vendor/core/ErrorUtils');\nconst invariant = require('invariant');\n\nexport type SpyData = {\n  type: number,\n  module: ?string,\n  method: string | number,\n  args: mixed[],\n  ...\n};\n\nconst TO_JS = 0;\nconst TO_NATIVE = 1;\n\nconst MODULE_IDS = 0;\nconst METHOD_IDS = 1;\nconst PARAMS = 2;\nconst MIN_TIME_BETWEEN_FLUSHES_MS = 5;\n\n// eslint-disable-next-line no-bitwise\nconst TRACE_TAG_REACT_APPS = 1 << 17;\n\nconst DEBUG_INFO_LIMIT = 32;\n\nclass MessageQueue {\n  _lazyCallableModules: {[key: string]: (void) => {...}, ...};\n  _queue: [number[], number[], mixed[], number];\n  _successCallbacks: Map<number, ?(...mixed[]) => void>;\n  _failureCallbacks: Map<number, ?(...mixed[]) => void>;\n  _callID: number;\n  _lastFlush: number;\n  _eventLoopStartTime: number;\n  _reactNativeMicrotasksCallback: ?() => void;\n\n  _debugInfo: {[number]: [number, number], ...};\n  _remoteModuleTable: {[number]: string, ...};\n  _remoteMethodTable: {[number]: $ReadOnlyArray<string>, ...};\n\n  __spy: ?(data: SpyData) => void;\n\n  constructor() {\n    this._lazyCallableModules = {};\n    this._queue = [[], [], [], 0];\n    this._successCallbacks = new Map();\n    this._failureCallbacks = new Map();\n    this._callID = 0;\n    this._lastFlush = 0;\n    this._eventLoopStartTime = Date.now();\n    this._reactNativeMicrotasksCallback = null;\n\n    if (__DEV__) {\n      this._debugInfo = {};\n      this._remoteModuleTable = {};\n      this._remoteMethodTable = {};\n    }\n\n    // $FlowFixMe[cannot-write]\n    this.callFunctionReturnFlushedQueue =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      this.callFunctionReturnFlushedQueue.bind(this);\n    // $FlowFixMe[cannot-write]\n    // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n    this.flushedQueue = this.flushedQueue.bind(this);\n\n    // $FlowFixMe[cannot-write]\n    this.invokeCallbackAndReturnFlushedQueue =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      this.invokeCallbackAndReturnFlushedQueue.bind(this);\n  }\n\n  /**\n   * Public APIs\n   */\n\n  static spy(spyOrToggle: boolean | ((data: SpyData) => void)) {\n    if (spyOrToggle === true) {\n      MessageQueue.prototype.__spy = info => {\n        console.log(\n          `${info.type === TO_JS ? 'N->JS' : 'JS->N'} : ` +\n            `${info.module != null ? info.module + '.' : ''}${info.method}` +\n            `(${JSON.stringify(info.args)})`,\n        );\n      };\n    } else if (spyOrToggle === false) {\n      MessageQueue.prototype.__spy = null;\n    } else {\n      MessageQueue.prototype.__spy = spyOrToggle;\n    }\n  }\n\n  callFunctionReturnFlushedQueue(\n    module: string,\n    method: string,\n    args: mixed[],\n  ): null | [Array<number>, Array<number>, Array<mixed>, number] {\n    this.__guard(() => {\n      this.__callFunction(module, method, args);\n    });\n\n    return this.flushedQueue();\n  }\n\n  invokeCallbackAndReturnFlushedQueue(\n    cbID: number,\n    args: mixed[],\n  ): null | [Array<number>, Array<number>, Array<mixed>, number] {\n    this.__guard(() => {\n      this.__invokeCallback(cbID, args);\n    });\n\n    return this.flushedQueue();\n  }\n\n  flushedQueue(): null | [Array<number>, Array<number>, Array<mixed>, number] {\n    this.__guard(() => {\n      this.__callReactNativeMicrotasks();\n    });\n\n    const queue = this._queue;\n    this._queue = [[], [], [], this._callID];\n    return queue[0].length ? queue : null;\n  }\n\n  getEventLoopRunningTime(): number {\n    return Date.now() - this._eventLoopStartTime;\n  }\n\n  registerCallableModule(name: string, module: {...}) {\n    this._lazyCallableModules[name] = () => module;\n  }\n\n  registerLazyCallableModule(name: string, factory: void => interface {}) {\n    let module: interface {};\n    let getValue: ?(void) => interface {} = factory;\n    this._lazyCallableModules[name] = () => {\n      if (getValue) {\n        module = getValue();\n        getValue = null;\n      }\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      return module;\n    };\n  }\n\n  getCallableModule(name: string): {...} | null {\n    const getValue = this._lazyCallableModules[name];\n    return getValue ? getValue() : null;\n  }\n\n  callNativeSyncHook(\n    moduleID: number,\n    methodID: number,\n    params: mixed[],\n    onFail: ?(...mixed[]) => void,\n    onSucc: ?(...mixed[]) => void,\n  ): mixed {\n    if (__DEV__) {\n      invariant(\n        global.nativeCallSyncHook,\n        'Calling synchronous methods on native ' +\n          'modules is not supported in Chrome.\\n\\n Consider providing alternative ' +\n          'methods to expose this method in debug mode, e.g. by exposing constants ' +\n          'ahead-of-time.',\n      );\n    }\n    this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n    return global.nativeCallSyncHook(moduleID, methodID, params);\n  }\n\n  processCallbacks(\n    moduleID: number,\n    methodID: number,\n    params: mixed[],\n    onFail: ?(...mixed[]) => void,\n    onSucc: ?(...mixed[]) => void,\n  ): void {\n    if (onFail || onSucc) {\n      if (__DEV__) {\n        this._debugInfo[this._callID] = [moduleID, methodID];\n        if (this._callID > DEBUG_INFO_LIMIT) {\n          delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];\n        }\n        if (this._successCallbacks.size > 500) {\n          const info: {[number]: {method: string, module: string}} = {};\n          this._successCallbacks.forEach((_, callID) => {\n            const debug = this._debugInfo[callID];\n            const module = debug && this._remoteModuleTable[debug[0]];\n            const method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n            info[callID] = {module, method};\n          });\n          warnOnce(\n            'excessive-number-of-pending-callbacks',\n            `Excessive number of pending callbacks: ${\n              this._successCallbacks.size\n            }. Some pending callbacks that might have leaked by never being called from native code: ${stringifySafe(\n              info,\n            )}`,\n          );\n        }\n      }\n      // Encode callIDs into pairs of callback identifiers by shifting left and using the rightmost bit\n      // to indicate fail (0) or success (1)\n      // eslint-disable-next-line no-bitwise\n      onFail && params.push(this._callID << 1);\n      // eslint-disable-next-line no-bitwise\n      onSucc && params.push((this._callID << 1) | 1);\n      this._successCallbacks.set(this._callID, onSucc);\n      this._failureCallbacks.set(this._callID, onFail);\n    }\n    if (__DEV__) {\n      global.nativeTraceBeginAsyncFlow &&\n        global.nativeTraceBeginAsyncFlow(\n          TRACE_TAG_REACT_APPS,\n          'native',\n          this._callID,\n        );\n    }\n    this._callID++;\n  }\n\n  enqueueNativeCall(\n    moduleID: number,\n    methodID: number,\n    params: mixed[],\n    onFail: ?(...mixed[]) => void,\n    onSucc: ?(...mixed[]) => void,\n  ): void {\n    this.processCallbacks(moduleID, methodID, params, onFail, onSucc);\n\n    this._queue[MODULE_IDS].push(moduleID);\n    this._queue[METHOD_IDS].push(methodID);\n\n    if (__DEV__) {\n      // Validate that parameters passed over the bridge are\n      // folly-convertible.  As a special case, if a prop value is a\n      // function it is permitted here, and special-cased in the\n      // conversion.\n      const isValidArgument = (val: mixed): boolean => {\n        switch (typeof val) {\n          case 'undefined':\n          case 'boolean':\n          case 'string':\n            return true;\n          case 'number':\n            return isFinite(val);\n          case 'object':\n            if (val == null) {\n              return true;\n            }\n\n            if (Array.isArray(val)) {\n              return val.every(isValidArgument);\n            }\n\n            for (const k in val) {\n              if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {\n                return false;\n              }\n            }\n\n            return true;\n          case 'function':\n            return false;\n          default:\n            return false;\n        }\n      };\n\n      // Replacement allows normally non-JSON-convertible values to be\n      // seen.  There is ambiguity with string values, but in context,\n      // it should at least be a strong hint.\n      const replacer = (key: string, val: $FlowFixMe) => {\n        const t = typeof val;\n        if (t === 'function') {\n          return '<<Function ' + val.name + '>>';\n        } else if (t === 'number' && !isFinite(val)) {\n          return '<<' + val.toString() + '>>';\n        } else {\n          return val;\n        }\n      };\n\n      // Note that JSON.stringify\n      invariant(\n        isValidArgument(params),\n        '%s is not usable as a native method argument',\n        JSON.stringify(params, replacer),\n      );\n\n      // The params object should not be mutated after being queued\n      deepFreezeAndThrowOnMutationInDev(params);\n    }\n    this._queue[PARAMS].push(params);\n\n    const now = Date.now();\n    if (\n      global.nativeFlushQueueImmediate &&\n      now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS\n    ) {\n      const queue = this._queue;\n      this._queue = [[], [], [], this._callID];\n      this._lastFlush = now;\n      global.nativeFlushQueueImmediate(queue);\n    }\n    Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);\n    if (__DEV__ && this.__spy && isFinite(moduleID)) {\n      // $FlowFixMe[not-a-function]\n      this.__spy({\n        type: TO_NATIVE,\n        module: this._remoteModuleTable[moduleID],\n        method: this._remoteMethodTable[moduleID][methodID],\n        args: params,\n      });\n    } else if (this.__spy) {\n      this.__spy({\n        type: TO_NATIVE,\n        module: moduleID + '',\n        method: methodID,\n        args: params,\n      });\n    }\n  }\n\n  createDebugLookup(\n    moduleID: number,\n    name: string,\n    methods: ?$ReadOnlyArray<string>,\n  ) {\n    if (__DEV__) {\n      this._remoteModuleTable[moduleID] = name;\n      this._remoteMethodTable[moduleID] = methods || [];\n    }\n  }\n\n  // For JSTimers to register its callback. Otherwise a circular dependency\n  // between modules is introduced. Note that only one callback may be\n  // registered at a time.\n  setReactNativeMicrotasksCallback(fn: () => void) {\n    this._reactNativeMicrotasksCallback = fn;\n  }\n\n  /**\n   * Private methods\n   */\n\n  __guard(fn: () => void) {\n    if (this.__shouldPauseOnThrow()) {\n      fn();\n    } else {\n      try {\n        fn();\n      } catch (error) {\n        ErrorUtils.reportFatalError(error);\n      }\n    }\n  }\n\n  // MessageQueue installs a global handler to catch all exceptions where JS users can register their own behavior\n  // This handler makes all exceptions to be propagated from inside MessageQueue rather than by the VM at their origin\n  // This makes stacktraces to be placed at MessageQueue rather than at where they were launched\n  // The parameter DebuggerInternal.shouldPauseOnThrow is used to check before catching all exceptions and\n  // can be configured by the VM or any Inspector\n  __shouldPauseOnThrow(): boolean {\n    return (\n      // $FlowFixMe[cannot-resolve-name]\n      typeof DebuggerInternal !== 'undefined' &&\n      // $FlowFixMe[cannot-resolve-name]\n      DebuggerInternal.shouldPauseOnThrow === true\n    );\n  }\n\n  __callReactNativeMicrotasks() {\n    Systrace.beginEvent('JSTimers.callReactNativeMicrotasks()');\n    if (this._reactNativeMicrotasksCallback != null) {\n      this._reactNativeMicrotasksCallback();\n    }\n    Systrace.endEvent();\n  }\n\n  __callFunction(module: string, method: string, args: mixed[]): void {\n    this._lastFlush = Date.now();\n    this._eventLoopStartTime = this._lastFlush;\n    if (__DEV__ || this.__spy) {\n      Systrace.beginEvent(`${module}.${method}(${stringifySafe(args)})`);\n    } else {\n      Systrace.beginEvent(`${module}.${method}(...)`);\n    }\n    if (this.__spy) {\n      this.__spy({type: TO_JS, module, method, args});\n    }\n    const moduleMethods = this.getCallableModule(module);\n    if (!moduleMethods) {\n      const callableModuleNames = Object.keys(this._lazyCallableModules);\n      const n = callableModuleNames.length;\n      const callableModuleNameList = callableModuleNames.join(', ');\n\n      // TODO(T122225939): Remove after investigation: Why are we getting to this line in bridgeless mode?\n      const isBridgelessMode = global.RN$Bridgeless === true ? 'true' : 'false';\n      invariant(\n        false,\n        `Failed to call into JavaScript module method ${module}.${method}(). Module has not been registered as callable. Bridgeless Mode: ${isBridgelessMode}. Registered callable JavaScript modules (n = ${n}): ${callableModuleNameList}.\n        A frequent cause of the error is that the application entry file path is incorrect. This can also happen when the JS bundle is corrupt or there is an early initialization error when loading React Native.`,\n      );\n    }\n    if (!moduleMethods[method]) {\n      invariant(\n        false,\n        `Failed to call into JavaScript module method ${module}.${method}(). Module exists, but the method is undefined.`,\n      );\n    }\n    moduleMethods[method].apply(moduleMethods, args);\n    Systrace.endEvent();\n  }\n\n  __invokeCallback(cbID: number, args: mixed[]): void {\n    this._lastFlush = Date.now();\n    this._eventLoopStartTime = this._lastFlush;\n\n    // The rightmost bit of cbID indicates fail (0) or success (1), the other bits are the callID shifted left.\n    // eslint-disable-next-line no-bitwise\n    const callID = cbID >>> 1;\n    // eslint-disable-next-line no-bitwise\n    const isSuccess = cbID & 1;\n    const callback = isSuccess\n      ? this._successCallbacks.get(callID)\n      : this._failureCallbacks.get(callID);\n\n    if (__DEV__) {\n      const debug = this._debugInfo[callID];\n      const module = debug && this._remoteModuleTable[debug[0]];\n      const method = debug && this._remoteMethodTable[debug[0]][debug[1]];\n      invariant(\n        callback,\n        `No callback found with cbID ${cbID} and callID ${callID} for ` +\n          (method\n            ? ` ${module}.${method} - most likely the callback was already invoked`\n            : `module ${module || '<unknown>'}`) +\n          `. Args: '${stringifySafe(args)}'`,\n      );\n      const profileName = debug\n        ? '<callback for ' + module + '.' + method + '>'\n        : cbID;\n      if (callback && this.__spy) {\n        this.__spy({type: TO_JS, module: null, method: profileName, args});\n      }\n      Systrace.beginEvent(\n        `MessageQueue.invokeCallback(${profileName}, ${stringifySafe(args)})`,\n      );\n    }\n\n    if (!callback) {\n      return;\n    }\n\n    this._successCallbacks.delete(callID);\n    this._failureCallbacks.delete(callID);\n    callback(...args);\n\n    if (__DEV__) {\n      Systrace.endEvent();\n    }\n  }\n}\n\nmodule.exports = MessageQueue;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}