{"ast":null,"code":"'use strict';\n\nvar _require = require(\"../Utilities/FeatureDetection\"),\n  hasNativeConstructor = _require.hasNativeConstructor;\nvar _require2 = require(\"../Utilities/PolyfillFunctions\"),\n  polyfillGlobal = _require2.polyfillGlobal;\nvar hasNativeGenerator;\ntry {\n  hasNativeGenerator = hasNativeConstructor(function* () {}, 'GeneratorFunction');\n} catch (_unused) {\n  hasNativeGenerator = false;\n}\nif (!hasNativeGenerator) {\n  polyfillGlobal('regeneratorRuntime', function () {\n    delete global.regeneratorRuntime;\n    return require('regenerator-runtime/runtime');\n  });\n}","map":{"version":3,"names":["_require","require","hasNativeConstructor","_require2","polyfillGlobal","hasNativeGenerator","_unused","global","regeneratorRuntime"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/Core/setUpRegeneratorRuntime.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst {hasNativeConstructor} = require('../Utilities/FeatureDetection');\nconst {polyfillGlobal} = require('../Utilities/PolyfillFunctions');\n\n/**\n * Set up regenerator.\n * You can use this module directly, or just require InitializeCore.\n */\n\nlet hasNativeGenerator;\ntry {\n  // If this function was lowered by regenerator-transform, it will try to\n  // access `global.regeneratorRuntime` which doesn't exist yet and will throw.\n  hasNativeGenerator = hasNativeConstructor(function* () {},\n  'GeneratorFunction');\n} catch {\n  // In this case, we know generators are not provided natively.\n  hasNativeGenerator = false;\n}\n\n// If generators are provided natively, which suggests that there was no\n// regenerator-transform, then there is no need to set up the runtime.\nif (!hasNativeGenerator) {\n  polyfillGlobal('regeneratorRuntime', () => {\n    // The require just sets up the global, so make sure when we first\n    // invoke it the global does not exist\n    delete global.regeneratorRuntime;\n\n    // regenerator-runtime/runtime exports the regeneratorRuntime object, so we\n    // can return it safely.\n    return require('regenerator-runtime/runtime'); // flowlint-line untyped-import:off\n  });\n}\n"],"mappings":"AAUA,YAAY;;AAEZ,IAAAA,QAAA,GAA+BC,OAAO,gCAAgC,CAAC;EAAhEC,oBAAoB,GAAAF,QAAA,CAApBE,oBAAoB;AAC3B,IAAAC,SAAA,GAAyBF,OAAO,iCAAiC,CAAC;EAA3DG,cAAc,GAAAD,SAAA,CAAdC,cAAc;AAOrB,IAAIC,kBAAkB;AACtB,IAAI;EAGFA,kBAAkB,GAAGH,oBAAoB,CAAC,aAAa,CAAC,CAAC,EACzD,mBAAmB,CAAC;AACtB,CAAC,CAAC,OAAAI,OAAA,EAAM;EAEND,kBAAkB,GAAG,KAAK;AAC5B;AAIA,IAAI,CAACA,kBAAkB,EAAE;EACvBD,cAAc,CAAC,oBAAoB,EAAE,YAAM;IAGzC,OAAOG,MAAM,CAACC,kBAAkB;IAIhC,OAAOP,OAAO,CAAC,6BAA6B,CAAC;EAC/C,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script","externalDependencies":[]}