{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport SafeAreaView from \"../Components/SafeAreaView/SafeAreaView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ScrollView = require(\"../Components/ScrollView/ScrollView\");\nvar TouchableHighlight = require(\"../Components/Touchable/TouchableHighlight\");\nvar View = require(\"../Components/View/View\");\nvar StyleSheet = require(\"../StyleSheet/StyleSheet\");\nvar Text = require(\"../Text/Text\");\nvar ElementProperties = require(\"./ElementProperties\");\nvar NetworkOverlay = require(\"./NetworkOverlay\");\nvar PerformanceOverlay = require(\"./PerformanceOverlay\");\nvar React = require('react');\nvar InspectorPanel = function (_React$Component) {\n  _inherits(InspectorPanel, _React$Component);\n  var _super = _createSuper(InspectorPanel);\n  function InspectorPanel() {\n    _classCallCheck(this, InspectorPanel);\n    return _super.apply(this, arguments);\n  }\n  _createClass(InspectorPanel, [{\n    key: \"renderWaiting\",\n    value: function renderWaiting() {\n      if (this.props.inspecting) {\n        return _jsx(Text, {\n          style: styles.waitingText,\n          children: \"Tap something to inspect it\"\n        });\n      }\n      return _jsx(Text, {\n        style: styles.waitingText,\n        children: \"Nothing is inspected\"\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var contents;\n      if (this.props.inspected) {\n        contents = _jsx(ScrollView, {\n          style: styles.properties,\n          children: _jsx(ElementProperties, {\n            style: this.props.inspected.style,\n            frame: this.props.inspected.frame,\n            source: this.props.inspected.source,\n            hierarchy: this.props.hierarchy,\n            selection: this.props.selection,\n            setSelection: this.props.setSelection\n          })\n        });\n      } else if (this.props.perfing) {\n        contents = _jsx(PerformanceOverlay, {});\n      } else if (this.props.networking) {\n        contents = _jsx(NetworkOverlay, {});\n      } else {\n        contents = _jsx(View, {\n          style: styles.waiting,\n          children: this.renderWaiting()\n        });\n      }\n      return _jsxs(SafeAreaView, {\n        style: styles.container,\n        children: [!this.props.devtoolsIsOpen && contents, _jsxs(View, {\n          style: styles.buttonRow,\n          children: [_jsx(InspectorPanelButton, {\n            title: 'Inspect',\n            pressed: this.props.inspecting,\n            onClick: this.props.setInspecting\n          }), _jsx(InspectorPanelButton, {\n            title: 'Perf',\n            pressed: this.props.perfing,\n            onClick: this.props.setPerfing\n          }), _jsx(InspectorPanelButton, {\n            title: 'Network',\n            pressed: this.props.networking,\n            onClick: this.props.setNetworking\n          }), _jsx(InspectorPanelButton, {\n            title: 'Touchables',\n            pressed: this.props.touchTargeting,\n            onClick: this.props.setTouchTargeting\n          })]\n        })]\n      });\n    }\n  }]);\n  return InspectorPanel;\n}(React.Component);\nvar InspectorPanelButton = function (_React$Component2) {\n  _inherits(InspectorPanelButton, _React$Component2);\n  var _super2 = _createSuper(InspectorPanelButton);\n  function InspectorPanelButton() {\n    _classCallCheck(this, InspectorPanelButton);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(InspectorPanelButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n      return _jsx(TouchableHighlight, {\n        onPress: function onPress() {\n          return _this.props.onClick(!_this.props.pressed);\n        },\n        style: [styles.button, this.props.pressed && styles.buttonPressed],\n        children: _jsx(Text, {\n          style: styles.buttonText,\n          children: this.props.title\n        })\n      });\n    }\n  }]);\n  return InspectorPanelButton;\n}(React.Component);\nvar styles = StyleSheet.create({\n  buttonRow: {\n    flexDirection: 'row'\n  },\n  button: {\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    margin: 2,\n    height: 30,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  buttonPressed: {\n    backgroundColor: 'rgba(255, 255, 255, 0.3)'\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white',\n    margin: 5\n  },\n  container: {\n    backgroundColor: 'rgba(0, 0, 0, 0.7)'\n  },\n  properties: {\n    height: 200\n  },\n  waiting: {\n    height: 100\n  },\n  waitingText: {\n    fontSize: 20,\n    textAlign: 'center',\n    marginVertical: 20,\n    color: 'white'\n  }\n});\nmodule.exports = InspectorPanel;","map":{"version":3,"names":["_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","SafeAreaView","jsx","_jsx","jsxs","_jsxs","ScrollView","require","TouchableHighlight","View","StyleSheet","Text","ElementProperties","NetworkOverlay","PerformanceOverlay","React","InspectorPanel","_React$Component","_super","key","value","renderWaiting","props","inspecting","style","styles","waitingText","children","render","contents","inspected","properties","frame","source","hierarchy","selection","setSelection","perfing","networking","waiting","container","devtoolsIsOpen","buttonRow","InspectorPanelButton","title","pressed","onClick","setInspecting","setPerfing","setNetworking","touchTargeting","setTouchTargeting","Component","_React$Component2","_super2","_this","onPress","button","buttonPressed","buttonText","create","flexDirection","backgroundColor","margin","height","justifyContent","alignItems","textAlign","color","fontSize","marginVertical","module","exports"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/Inspector/InspectorPanel.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\n\nimport SafeAreaView from '../Components/SafeAreaView/SafeAreaView';\n\nconst ScrollView = require('../Components/ScrollView/ScrollView');\nconst TouchableHighlight = require('../Components/Touchable/TouchableHighlight');\nconst View = require('../Components/View/View');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst Text = require('../Text/Text');\nconst ElementProperties = require('./ElementProperties');\nconst NetworkOverlay = require('./NetworkOverlay');\nconst PerformanceOverlay = require('./PerformanceOverlay');\nconst React = require('react');\n\ntype Props = $ReadOnly<{|\n  devtoolsIsOpen: boolean,\n  inspecting: boolean,\n  setInspecting: (val: boolean) => void,\n  perfing: boolean,\n  setPerfing: (val: boolean) => void,\n  touchTargeting: boolean,\n  setTouchTargeting: (val: boolean) => void,\n  networking: boolean,\n  setNetworking: (val: boolean) => void,\n  hierarchy?: ?Array<{|name: string|}>,\n  selection?: ?number,\n  setSelection: number => mixed,\n  inspected?: ?$ReadOnly<{|\n    style?: ?ViewStyleProp,\n    frame?: ?$ReadOnly<{|\n      top?: ?number,\n      left?: ?number,\n      width?: ?number,\n      height: ?number,\n    |}>,\n    source?: ?{|\n      fileName?: string,\n      lineNumber?: number,\n    |},\n  |}>,\n|}>;\n\nclass InspectorPanel extends React.Component<Props> {\n  renderWaiting(): React.Node {\n    if (this.props.inspecting) {\n      return (\n        <Text style={styles.waitingText}>Tap something to inspect it</Text>\n      );\n    }\n    return <Text style={styles.waitingText}>Nothing is inspected</Text>;\n  }\n\n  render(): React.Node {\n    let contents;\n    if (this.props.inspected) {\n      contents = (\n        <ScrollView style={styles.properties}>\n          <ElementProperties\n            style={this.props.inspected.style}\n            frame={this.props.inspected.frame}\n            source={this.props.inspected.source}\n            // $FlowFixMe[incompatible-type] : Hierarchy should be non-nullable\n            hierarchy={this.props.hierarchy}\n            selection={this.props.selection}\n            setSelection={this.props.setSelection}\n          />\n        </ScrollView>\n      );\n    } else if (this.props.perfing) {\n      contents = <PerformanceOverlay />;\n    } else if (this.props.networking) {\n      contents = <NetworkOverlay />;\n    } else {\n      contents = <View style={styles.waiting}>{this.renderWaiting()}</View>;\n    }\n    return (\n      <SafeAreaView style={styles.container}>\n        {!this.props.devtoolsIsOpen && contents}\n        <View style={styles.buttonRow}>\n          <InspectorPanelButton\n            title={'Inspect'}\n            pressed={this.props.inspecting}\n            onClick={this.props.setInspecting}\n          />\n          <InspectorPanelButton\n            title={'Perf'}\n            pressed={this.props.perfing}\n            onClick={this.props.setPerfing}\n          />\n          <InspectorPanelButton\n            title={'Network'}\n            pressed={this.props.networking}\n            onClick={this.props.setNetworking}\n          />\n          <InspectorPanelButton\n            title={'Touchables'}\n            pressed={this.props.touchTargeting}\n            onClick={this.props.setTouchTargeting}\n          />\n        </View>\n      </SafeAreaView>\n    );\n  }\n}\n\ntype InspectorPanelButtonProps = $ReadOnly<{|\n  onClick: (val: boolean) => void,\n  pressed: boolean,\n  title: string,\n|}>;\n\nclass InspectorPanelButton extends React.Component<InspectorPanelButtonProps> {\n  render(): React.Node {\n    return (\n      <TouchableHighlight\n        onPress={() => this.props.onClick(!this.props.pressed)}\n        style={[styles.button, this.props.pressed && styles.buttonPressed]}>\n        <Text style={styles.buttonText}>{this.props.title}</Text>\n      </TouchableHighlight>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  buttonRow: {\n    flexDirection: 'row',\n  },\n  button: {\n    backgroundColor: 'rgba(0, 0, 0, 0.3)',\n    margin: 2,\n    height: 30,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  buttonPressed: {\n    backgroundColor: 'rgba(255, 255, 255, 0.3)',\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: 'white',\n    margin: 5,\n  },\n  container: {\n    backgroundColor: 'rgba(0, 0, 0, 0.7)',\n  },\n  properties: {\n    height: 200,\n  },\n  waiting: {\n    height: 100,\n  },\n  waitingText: {\n    fontSize: 20,\n    textAlign: 'center',\n    marginVertical: 20,\n    color: 'white',\n  },\n});\n\nmodule.exports = InspectorPanel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}