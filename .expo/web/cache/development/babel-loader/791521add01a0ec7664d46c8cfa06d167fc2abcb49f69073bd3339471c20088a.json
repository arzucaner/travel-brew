{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport UIManager from \"../../ReactNative/UIManager\";\nimport processColor from \"../../StyleSheet/processColor\";\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport Platform from \"../../Utilities/Platform\";\nimport View from \"../View/View\";\nimport TraceUpdateOverlayNativeComponent, { Commands } from \"./TraceUpdateOverlayNativeComponent\";\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar useEffect = React.useEffect,\n  useRef = React.useRef,\n  useState = React.useState;\nvar hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\nvar isNativeComponentReady = Platform.OS === 'android' && UIManager.hasViewManagerConfig('TraceUpdateOverlay');\nvar devToolsAgent;\nexport default function TraceUpdateOverlay() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    overlayDisabled = _useState2[0],\n    setOverlayDisabled = _useState2[1];\n  useEffect(function () {\n    if (!isNativeComponentReady) {\n      return;\n    }\n    function attachToDevtools(agent) {\n      devToolsAgent = agent;\n      agent.addListener('drawTraceUpdates', onAgentDrawTraceUpdates);\n      agent.addListener('disableTraceUpdates', onAgentDisableTraceUpdates);\n    }\n    function subscribe() {\n      hook == null ? void 0 : hook.on('react-devtools', attachToDevtools);\n      if (hook != null && hook.reactDevtoolsAgent) {\n        attachToDevtools(hook.reactDevtoolsAgent);\n      }\n    }\n    function unsubscribe() {\n      hook == null ? void 0 : hook.off('react-devtools', attachToDevtools);\n      var agent = devToolsAgent;\n      if (agent != null) {\n        agent.removeListener('drawTraceUpdates', onAgentDrawTraceUpdates);\n        agent.removeListener('disableTraceUpdates', onAgentDisableTraceUpdates);\n        devToolsAgent = null;\n      }\n    }\n    function onAgentDrawTraceUpdates() {\n      var nodesToDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      setOverlayDisabled(false);\n      var newFramesToDraw = [];\n      nodesToDraw.forEach(function (_ref) {\n        var _ref2, _node$publicInstance;\n        var node = _ref.node,\n          color = _ref.color;\n        var component = (_ref2 = (_node$publicInstance = node.publicInstance) != null ? _node$publicInstance : node.canonical) != null ? _ref2 : node;\n        if (!component || !component.measure) {\n          return;\n        }\n        var frameToDrawPromise = new Promise(function (resolve) {\n          if (component.measure) {\n            component.measure(function (x, y, width, height, left, top) {\n              resolve({\n                rect: {\n                  left: left,\n                  top: top,\n                  width: width,\n                  height: height\n                },\n                color: processColor(color)\n              });\n            });\n          }\n        });\n        newFramesToDraw.push(frameToDrawPromise);\n      });\n      Promise.all(newFramesToDraw).then(function (results) {\n        if (nativeComponentRef.current != null) {\n          Commands.draw(nativeComponentRef.current, JSON.stringify(results.filter(function (_ref3) {\n            var rect = _ref3.rect,\n              color = _ref3.color;\n            return rect.width >= 0 && rect.height >= 0;\n          })));\n        }\n      }, function (err) {\n        console.error(`Failed to measure updated traces. Error: ${err}`);\n      });\n    }\n    function onAgentDisableTraceUpdates() {\n      setOverlayDisabled(true);\n    }\n    subscribe();\n    return unsubscribe;\n  }, []);\n  var nativeComponentRef = useRef(null);\n  return !overlayDisabled && isNativeComponentReady && _jsx(View, {\n    pointerEvents: \"none\",\n    style: styles.overlay,\n    children: _jsx(TraceUpdateOverlayNativeComponent, {\n      ref: nativeComponentRef,\n      style: styles.overlay\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"names":["UIManager","processColor","StyleSheet","Platform","View","TraceUpdateOverlayNativeComponent","Commands","React","jsx","_jsx","useEffect","useRef","useState","hook","window","__REACT_DEVTOOLS_GLOBAL_HOOK__","isNativeComponentReady","OS","hasViewManagerConfig","devToolsAgent","TraceUpdateOverlay","_useState","_useState2","_slicedToArray","overlayDisabled","setOverlayDisabled","attachToDevtools","agent","addListener","onAgentDrawTraceUpdates","onAgentDisableTraceUpdates","subscribe","on","reactDevtoolsAgent","unsubscribe","off","removeListener","nodesToDraw","arguments","length","undefined","newFramesToDraw","forEach","_ref","_ref2","_node$publicInstance","node","color","component","publicInstance","canonical","measure","frameToDrawPromise","Promise","resolve","x","y","width","height","left","top","rect","push","all","then","results","nativeComponentRef","current","draw","JSON","stringify","filter","_ref3","err","console","error","pointerEvents","style","styles","overlay","children","ref","create","position","bottom","right"],"sources":["C:/Users/arzug/Documents/GitHub/travel-brew/node_modules/react-native/Libraries/Components/TraceUpdateOverlay/TraceUpdateOverlay.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Overlay} from './TraceUpdateOverlayNativeComponent';\n\nimport UIManager from '../../ReactNative/UIManager';\nimport processColor from '../../StyleSheet/processColor';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport Platform from '../../Utilities/Platform';\nimport View from '../View/View';\nimport TraceUpdateOverlayNativeComponent, {\n  Commands,\n} from './TraceUpdateOverlayNativeComponent';\nimport * as React from 'react';\n\ntype AgentEvents = {\n  drawTraceUpdates: [Array<{node: TraceNode, color: string}>],\n  disableTraceUpdates: [],\n};\n\ninterface Agent {\n  addListener<Event: $Keys<AgentEvents>>(\n    event: Event,\n    listener: (...AgentEvents[Event]) => void,\n  ): void;\n  removeListener(event: $Keys<AgentEvents>, listener: () => void): void;\n}\n\ntype TraceNode = {\n  publicInstance?: TraceNode,\n  // TODO: remove this field when syncing the new version of the renderer from React to React Native.\n  canonical?: TraceNode,\n  measure?: (\n    (\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      left: number,\n      top: number,\n    ) => void,\n  ) => void,\n};\n\ntype ReactDevToolsGlobalHook = {\n  on: (eventName: string, (agent: Agent) => void) => void,\n  off: (eventName: string, (agent: Agent) => void) => void,\n  reactDevtoolsAgent: Agent,\n};\n\nconst {useEffect, useRef, useState} = React;\nconst hook: ReactDevToolsGlobalHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\nconst isNativeComponentReady =\n  Platform.OS === 'android' &&\n  UIManager.hasViewManagerConfig('TraceUpdateOverlay');\nlet devToolsAgent: ?Agent;\n\nexport default function TraceUpdateOverlay(): React.Node {\n  const [overlayDisabled, setOverlayDisabled] = useState(false);\n  // This effect is designed to be explicitly shown here to avoid re-subscribe from the same\n  // overlay component.\n  useEffect(() => {\n    if (!isNativeComponentReady) {\n      return;\n    }\n\n    function attachToDevtools(agent: Agent) {\n      devToolsAgent = agent;\n      agent.addListener('drawTraceUpdates', onAgentDrawTraceUpdates);\n      agent.addListener('disableTraceUpdates', onAgentDisableTraceUpdates);\n    }\n\n    function subscribe() {\n      hook?.on('react-devtools', attachToDevtools);\n      if (hook?.reactDevtoolsAgent) {\n        attachToDevtools(hook.reactDevtoolsAgent);\n      }\n    }\n\n    function unsubscribe() {\n      hook?.off('react-devtools', attachToDevtools);\n      const agent = devToolsAgent;\n      if (agent != null) {\n        agent.removeListener('drawTraceUpdates', onAgentDrawTraceUpdates);\n        agent.removeListener('disableTraceUpdates', onAgentDisableTraceUpdates);\n        devToolsAgent = null;\n      }\n    }\n\n    function onAgentDrawTraceUpdates(\n      nodesToDraw: Array<{node: TraceNode, color: string}> = [],\n    ) {\n      // If overlay is disabled before, now it's enabled.\n      setOverlayDisabled(false);\n\n      const newFramesToDraw: Array<Promise<Overlay>> = [];\n      nodesToDraw.forEach(({node, color}) => {\n        // `publicInstance` => Fabric\n        // TODO: remove this check when syncing the new version of the renderer from React to React Native.\n        // `canonical` => Legacy Fabric\n        // `node` => Legacy renderer\n        const component = node.publicInstance ?? node.canonical ?? node;\n        if (!component || !component.measure) {\n          return;\n        }\n        const frameToDrawPromise = new Promise<Overlay>(resolve => {\n          // The if statement here is to make flow happy\n          if (component.measure) {\n            // TODO(T145522797): We should refactor this to use `getBoundingClientRect` when Paper is no longer supported.\n            component.measure((x, y, width, height, left, top) => {\n              resolve({\n                rect: {left, top, width, height},\n                color: processColor(color),\n              });\n            });\n          }\n        });\n        newFramesToDraw.push(frameToDrawPromise);\n      });\n      Promise.all(newFramesToDraw).then(\n        results => {\n          if (nativeComponentRef.current != null) {\n            Commands.draw(\n              nativeComponentRef.current,\n              JSON.stringify(\n                results.filter(\n                  ({rect, color}) => rect.width >= 0 && rect.height >= 0,\n                ),\n              ),\n            );\n          }\n        },\n        err => {\n          console.error(`Failed to measure updated traces. Error: ${err}`);\n        },\n      );\n    }\n\n    function onAgentDisableTraceUpdates() {\n      // When trace updates are disabled from the backend, we won't receive draw events until it's enabled by the next draw. We can safely remove the overlay as it's not needed now.\n      setOverlayDisabled(true);\n    }\n\n    subscribe();\n    return unsubscribe;\n  }, []); // Only run once when the overlay initially rendered\n\n  const nativeComponentRef =\n    useRef<?React.ElementRef<typeof TraceUpdateOverlayNativeComponent>>(null);\n\n  return (\n    !overlayDisabled &&\n    isNativeComponentReady && (\n      <View pointerEvents=\"none\" style={styles.overlay}>\n        <TraceUpdateOverlayNativeComponent\n          ref={nativeComponentRef}\n          style={styles.overlay}\n        />\n      </View>\n    )\n  );\n}\n\nconst styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}